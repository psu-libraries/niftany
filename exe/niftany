#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift("#{__dir__}/../lib")

require 'rubocop'
require 'erb_lint/cli'
require 'scss_lint'
require 'scss_lint/cli'
require 'colorize'

def parse_opts(args)
  options = Struct.new
  options.auto_correct = false
  options.parallel = false

  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: niftany [options]'

    opts.on('-a', '--auto-correct', 'Correct violations') do |auto|
      options.auto_correct = auto
    end

    opts.on('-p', '--parallel', 'Run RuboCop in parallel') do |parallel|
      options.parallel = parallel
    end

    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
      exit
    end
  end
  parser.parse!(args)
  options
end

def rubocop_options(options)
  rubocop_options = []
  rubocop_options.append('--auto-correct') if options.auto_correct
  rubocop_options.append('--parallel') if options.parallel
  rubocop_options
end

def erblint_options(options)
  return ['--lint-all'] unless options.auto_correct

  ['--lint-all', '--autocorrect']
end

options = parse_opts(ARGV)
result = 0

puts 'Running Rubocop'.yellow
rubocop = RuboCop::CLI.new.run(rubocop_options(options)) # returns integer

if rubocop.zero?
  puts 'Rubocop OK!'.green
else
  result = 1
  puts 'Rubocop FAILED!'.red
end

puts 'Running ERBLint'.yellow
erblint = ERBLint::CLI.new.run(erblint_options(options)) # returns boolean

if erblint
  puts 'ERBLint OK!'.green
else
  result = 1
  puts 'ERBLint FAILED!'.red
end

puts 'Running SCSSLint'.yellow
logger = SCSSLint::Logger.new($stdout)
scss_lint = SCSSLint::CLI.new(logger).run(ARGV) # returns integer

if scss_lint.zero?
  puts 'SCSSLint OK!'.green
else
  result = 1
  puts 'SCSSLint FAILED!'.red
end

exit result
